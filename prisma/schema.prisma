generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model assignment {
  id                                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  account_manager_id                       String    @db.Uuid
  meter_reader_id                          String    @db.Uuid
  customer_id                              String    @db.Uuid
  assignment_date                          DateTime? @db.Date
  created_at                               DateTime  @default(now()) @db.Timestamp(6)
  updated_at                               DateTime  @default(now()) @db.Timestamp(6)
  user_assignment_account_manager_idTouser user      @relation("assignment_account_manager_idTouser", fields: [account_manager_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customer                                 customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_assignment_meter_reader_idTouser    user      @relation("assignment_meter_reader_idTouser", fields: [meter_reader_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model bill {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id      String        @db.Uuid
  meter_reading_id String        @db.Uuid
  bill_date        DateTime?     @db.Date
  bill_amount      Int?
  bill_paid        Boolean?      @default(false)
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  customer         customer      @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  meter_reading    meter_reading @relation(fields: [meter_reading_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model customer {
  id                                     String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                String          @db.Uuid
  account_manager_id                     String          @db.Uuid
  meter_reader_id                        String          @db.Uuid
  address                                String?         @db.VarChar(255)
  city                                   String?         @db.VarChar(255)
  state                                  String?         @db.VarChar(255)
  zip_code                               String?         @db.VarChar(10)
  created_at                             DateTime        @default(now()) @db.Timestamp(6)
  updated_at                             DateTime        @default(now()) @db.Timestamp(6)
  assignment                             assignment[]
  bill                                   bill[]
  user_customer_account_manager_idTouser user            @relation("customer_account_manager_idTouser", fields: [account_manager_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_customer_meter_reader_idTouser    user            @relation("customer_meter_reader_idTouser", fields: [meter_reader_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_customer_user_idTouser            user            @relation("customer_user_idTouser", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  meter_reading                          meter_reading[]
}

model meter_reading {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id     String    @db.Uuid
  reading_date    DateTime? @db.Date
  reading_value   Int?
  bill_calculated Boolean?  @default(false)
  bill_amount     Int?
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  bill            bill[]
  customer        customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                                             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                          String       @unique @db.VarChar(255)
  firstName                                      String?      @db.VarChar(255)
  lastName                                       String?      @db.VarChar(255)
  roq_user_id                                    String       @db.VarChar(255)
  tenant_id                                      String       @db.VarChar(255)
  created_at                                     DateTime     @default(now()) @db.Timestamp(6)
  updated_at                                     DateTime     @default(now()) @db.Timestamp(6)
  assignment_assignment_account_manager_idTouser assignment[] @relation("assignment_account_manager_idTouser")
  assignment_assignment_meter_reader_idTouser    assignment[] @relation("assignment_meter_reader_idTouser")
  company                                        company[]
  customer_customer_account_manager_idTouser     customer[]   @relation("customer_account_manager_idTouser")
  customer_customer_meter_reader_idTouser        customer[]   @relation("customer_meter_reader_idTouser")
  customer_customer_user_idTouser                customer[]   @relation("customer_user_idTouser")
}
